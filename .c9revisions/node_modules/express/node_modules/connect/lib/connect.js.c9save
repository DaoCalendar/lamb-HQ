{"ts":1359029162088,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/*!\n * Connect\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter\n  , proto = require('./proto')\n  , utils = require('./utils')\n  , path = require('path')\n  , basename = path.basename\n  , fs = require('fs');\n\n// node patches\n\nrequire('./patch');\n\n// expose createServer() as the module\n\nexports = module.exports = createServer;\n\n/**\n * Framework version.\n */\n\nexports.version = '2.7.2';\n\n/**\n * Expose mime module.\n */\n\nexports.mime = require('./middleware/static').mime;\n\n/**\n * Expose the prototype.\n */\n\nexports.proto = proto;\n\n/**\n * Auto-load middleware getters.\n */\n\nexports.middleware = {};\n\n/**\n * Expose utilities.\n */\n\nexports.utils = utils;\n\n/**\n * Create a new connect server.\n *\n * @return {Function}\n * @api public\n */\n\nfunction createServer() {\n  function app(req, res){ app.handle(req, res); }\n  utils.merge(app, proto);\n  utils.merge(app, EventEmitter.prototype);\n  app.route = '/';\n  app.stack = [];\n  for (var i = 0; i < arguments.length; ++i) {\n    app.use(arguments[i]);\n  }\n  return app;\n};\n\n/**\n * Support old `.createServer()` method.\n */\n\ncreateServer.createServer = createServer;\n\n/**\n * Auto-load bundled middleware with getters.\n */\n\nfs.readdirSync(__dirname + '/middleware').forEach(function(filename){\n  if (!/\\.js$/.test(filename)) return;\n  var name = basename(filename, '.js');\n  function load(){ return require('./middleware/' + name); }\n  exports.middleware.__defineGetter__(name, load);\n  exports.__defineGetter__(name, load);\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":1590}]],"length":1590}
