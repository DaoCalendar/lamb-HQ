{"ts":1359004300989,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * Module dependencies.\n */\n\nvar path = require('path')\n  , fs = require('fs')\n  , utils = require('./utils')\n  , dirname = path.dirname\n  , basename = path.basename\n  , extname = path.extname\n  , exists = fs.existsSync || path.existsSync \n  , join = path.join;\n\n/**\n * Expose `View`.\n */\n\nmodule.exports = View;\n\n/**\n * Initialize a new `View` with the given `name`.\n *\n * Options:\n *\n *   - `defaultEngine` the default template engine name \n *   - `engines` template engine require() cache \n *   - `root` root path for view lookup \n *\n * @param {String} name\n * @param {Object} options\n * @api private\n */\n\nfunction View(name, options) {\n  options = options || {};\n  this.name = name;\n  this.root = options.root;\n  var engines = options.engines;\n  this.defaultEngine = options.defaultEngine;\n  var ext = this.ext = extname(name);\n  if (!ext) name += (ext = this.ext = '.' + this.defaultEngine);\n  this.engine = engines[ext] || (engines[ext] = require(ext.slice(1)).__express);\n  this.path = this.lookup(name);\n}\n\n/**\n * Lookup view by the given `path`\n *\n * @param {String} path\n * @return {String}\n * @api private\n */\n\nView.prototype.lookup = function(path){\n  var ext = this.ext;\n\n  // <path>.<engine>\n  if (!utils.isAbsolute(path)) path = join(this.root, path);\n  if (exists(path)) return path;\n\n  // <path>/index.<engine>\n  path = join(dirname(path), basename(path, ext), 'index' + ext);\n  if (exists(path)) return path;\n};\n\n/**\n * Render with the given `options` and callback `fn(err, str)`.\n *\n * @param {Object} options\n * @param {Function} fn\n * @api private\n */\n\nView.prototype.render = function(options, fn){\n  this.engine(this.path, options, fn);\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":1667}]],"length":1667}
